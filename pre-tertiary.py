{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as np\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#upload data to jupyter\n",
    "extra2 = pd.read_csv(r'C:\\Users\\Azra\\Documents\\Shopee Project\\20200530 BestCoder Project\\2. Prepared Data\\20200530 Pre-Tretiary\\ptr-rd1\\Extra_material_2.csv')\n",
    "extra3 = pd.read_csv(r'C:\\Users\\Azra\\Documents\\Shopee Project\\20200530 BestCoder Project\\2. Prepared Data\\20200530 Pre-Tretiary\\ptr-rd1\\Extra_material_3.csv')\n",
    "extra3 = extra3.rename(columns={'shopid':'shop_id'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#check each head of data\n",
    "#extra2.head()\n",
    "#extra3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>orderid</th>\n",
       "      <th>itemid</th>\n",
       "      <th>date_id</th>\n",
       "      <th>amount</th>\n",
       "      <th>item_price_usd</th>\n",
       "      <th>shop_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1316773501</td>\n",
       "      <td>1355135789</td>\n",
       "      <td>16/5/2019</td>\n",
       "      <td>1</td>\n",
       "      <td>5.483204</td>\n",
       "      <td>65948755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1316774684</td>\n",
       "      <td>1257902741</td>\n",
       "      <td>16/5/2019</td>\n",
       "      <td>1</td>\n",
       "      <td>0.387050</td>\n",
       "      <td>61364537</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1316803330</td>\n",
       "      <td>2126770455</td>\n",
       "      <td>16/5/2019</td>\n",
       "      <td>1</td>\n",
       "      <td>0.344044</td>\n",
       "      <td>4980129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1317196434</td>\n",
       "      <td>2112999088</td>\n",
       "      <td>16/5/2019</td>\n",
       "      <td>1</td>\n",
       "      <td>6.704561</td>\n",
       "      <td>29089750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1318105348</td>\n",
       "      <td>1832131969</td>\n",
       "      <td>16/5/2019</td>\n",
       "      <td>1</td>\n",
       "      <td>5.354187</td>\n",
       "      <td>94372493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048570</th>\n",
       "      <td>1282783920</td>\n",
       "      <td>2117708081</td>\n",
       "      <td>5/5/2019</td>\n",
       "      <td>1</td>\n",
       "      <td>2.451315</td>\n",
       "      <td>36050398</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048571</th>\n",
       "      <td>1282784581</td>\n",
       "      <td>2073505055</td>\n",
       "      <td>5/5/2019</td>\n",
       "      <td>1</td>\n",
       "      <td>1.311668</td>\n",
       "      <td>133389379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048572</th>\n",
       "      <td>1282794723</td>\n",
       "      <td>1074306637</td>\n",
       "      <td>5/5/2019</td>\n",
       "      <td>1</td>\n",
       "      <td>1.161149</td>\n",
       "      <td>58327801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048573</th>\n",
       "      <td>1282806746</td>\n",
       "      <td>1279044775</td>\n",
       "      <td>5/5/2019</td>\n",
       "      <td>1</td>\n",
       "      <td>30.060860</td>\n",
       "      <td>26210794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1048574</th>\n",
       "      <td>1282810258</td>\n",
       "      <td>1560947671</td>\n",
       "      <td>5/5/2019</td>\n",
       "      <td>1</td>\n",
       "      <td>3.096398</td>\n",
       "      <td>58110183</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1048575 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            orderid      itemid    date_id  amount  item_price_usd    shop_id\n",
       "0        1316773501  1355135789  16/5/2019       1        5.483204   65948755\n",
       "1        1316774684  1257902741  16/5/2019       1        0.387050   61364537\n",
       "2        1316803330  2126770455  16/5/2019       1        0.344044    4980129\n",
       "3        1317196434  2112999088  16/5/2019       1        6.704561   29089750\n",
       "4        1318105348  1832131969  16/5/2019       1        5.354187   94372493\n",
       "...             ...         ...        ...     ...             ...        ...\n",
       "1048570  1282783920  2117708081   5/5/2019       1        2.451315   36050398\n",
       "1048571  1282784581  2073505055   5/5/2019       1        1.311668  133389379\n",
       "1048572  1282794723  1074306637   5/5/2019       1        1.161149   58327801\n",
       "1048573  1282806746  1279044775   5/5/2019       1       30.060860   26210794\n",
       "1048574  1282810258  1560947671   5/5/2019       1        3.096398   58110183\n",
       "\n",
       "[1048575 rows x 6 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#delete data that don't have date time in extra3\n",
    "extra3_new = extra3[pd.notnull(extra3.date_id)]\n",
    "#checking\n",
    "extra3_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method DataFrame.info of             orderid      itemid    date_id  amount  item_price_usd    shop_id\n",
       "0        1316773501  1355135789 2019-05-16       1        5.483204   65948755\n",
       "1        1316774684  1257902741 2019-05-16       1        0.387050   61364537\n",
       "2        1316803330  2126770455 2019-05-16       1        0.344044    4980129\n",
       "3        1317196434  2112999088 2019-05-16       1        6.704561   29089750\n",
       "4        1318105348  1832131969 2019-05-16       1        5.354187   94372493\n",
       "...             ...         ...        ...     ...             ...        ...\n",
       "1048570  1282783920  2117708081 2019-05-05       1        2.451315   36050398\n",
       "1048571  1282784581  2073505055 2019-05-05       1        1.311668  133389379\n",
       "1048572  1282794723  1074306637 2019-05-05       1        1.161149   58327801\n",
       "1048573  1282806746  1279044775 2019-05-05       1       30.060860   26210794\n",
       "1048574  1282810258  1560947671 2019-05-05       1        3.096398   58110183\n",
       "\n",
       "[1048575 rows x 6 columns]>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#changing type for date, orderid, itemid in extra3_new\n",
    "extra3_new['date_id'] = pd.to_datetime(extra3_new['date_id'], format='%d/%m/%Y')\n",
    "extra3_new['orderid'] = extra3_new['orderid'].astype(int)\n",
    "extra3_new['itemid'] = extra3_new['itemid'].astype(int)\n",
    "extra3_new['shop_id'] = extra3_new['shop_id'].astype(int)\n",
    "\n",
    "#changing type for date, orderid, itemid in extra2\n",
    "extra2['shop_id'] = extra2['shop_id'].astype(int)\n",
    "extra3_new.info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int32')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "extra2['shop_id'].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>orderid</th>\n",
       "      <th>itemid</th>\n",
       "      <th>date_id</th>\n",
       "      <th>amount</th>\n",
       "      <th>item_price_usd</th>\n",
       "      <th>shop_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1316773501</td>\n",
       "      <td>1355135789</td>\n",
       "      <td>2019-05-16</td>\n",
       "      <td>1</td>\n",
       "      <td>5.483204</td>\n",
       "      <td>65948755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1316774684</td>\n",
       "      <td>1257902741</td>\n",
       "      <td>2019-05-16</td>\n",
       "      <td>1</td>\n",
       "      <td>0.387050</td>\n",
       "      <td>61364537</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1316803330</td>\n",
       "      <td>2126770455</td>\n",
       "      <td>2019-05-16</td>\n",
       "      <td>1</td>\n",
       "      <td>0.344044</td>\n",
       "      <td>4980129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1317196434</td>\n",
       "      <td>2112999088</td>\n",
       "      <td>2019-05-16</td>\n",
       "      <td>1</td>\n",
       "      <td>6.704561</td>\n",
       "      <td>29089750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1318105348</td>\n",
       "      <td>1832131969</td>\n",
       "      <td>2019-05-16</td>\n",
       "      <td>1</td>\n",
       "      <td>5.354187</td>\n",
       "      <td>94372493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977066</th>\n",
       "      <td>1377703655</td>\n",
       "      <td>1286506704</td>\n",
       "      <td>2019-05-29</td>\n",
       "      <td>1</td>\n",
       "      <td>2.924375</td>\n",
       "      <td>73789223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977067</th>\n",
       "      <td>1377741389</td>\n",
       "      <td>1726943954</td>\n",
       "      <td>2019-05-29</td>\n",
       "      <td>2</td>\n",
       "      <td>18.062319</td>\n",
       "      <td>52323543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977068</th>\n",
       "      <td>1377744165</td>\n",
       "      <td>423611298</td>\n",
       "      <td>2019-05-29</td>\n",
       "      <td>1</td>\n",
       "      <td>4.300552</td>\n",
       "      <td>20187300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977069</th>\n",
       "      <td>1377759268</td>\n",
       "      <td>1420094546</td>\n",
       "      <td>2019-05-29</td>\n",
       "      <td>1</td>\n",
       "      <td>13.976795</td>\n",
       "      <td>46595353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977070</th>\n",
       "      <td>1377766435</td>\n",
       "      <td>237867635</td>\n",
       "      <td>2019-05-29</td>\n",
       "      <td>1</td>\n",
       "      <td>23.179976</td>\n",
       "      <td>21180592</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>706482 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           orderid      itemid    date_id  amount  item_price_usd   shop_id\n",
       "0       1316773501  1355135789 2019-05-16       1        5.483204  65948755\n",
       "1       1316774684  1257902741 2019-05-16       1        0.387050  61364537\n",
       "2       1316803330  2126770455 2019-05-16       1        0.344044   4980129\n",
       "3       1317196434  2112999088 2019-05-16       1        6.704561  29089750\n",
       "4       1318105348  1832131969 2019-05-16       1        5.354187  94372493\n",
       "...            ...         ...        ...     ...             ...       ...\n",
       "977066  1377703655  1286506704 2019-05-29       1        2.924375  73789223\n",
       "977067  1377741389  1726943954 2019-05-29       2       18.062319  52323543\n",
       "977068  1377744165   423611298 2019-05-29       1        4.300552  20187300\n",
       "977069  1377759268  1420094546 2019-05-29       1       13.976795  46595353\n",
       "977070  1377766435   237867635 2019-05-29       1       23.179976  21180592\n",
       "\n",
       "[706482 rows x 6 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#selecting a range of date in extra_3_new (10-31 May 2019)\n",
    "extra3_new_1=extra3_new[(extra3_new.date_id>='2019-05-10') & (extra3_new.date_id<='2019-05-31')]\n",
    "extra3_new_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#combining both data into one dataframe\n",
    "combined=pd.merge(left = extra2,right = extra3_new_1,how='left',left_on='shop_id',right_on='shop_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>shop_id</th>\n",
       "      <th>brand</th>\n",
       "      <th>shop_type</th>\n",
       "      <th>orderid</th>\n",
       "      <th>itemid</th>\n",
       "      <th>date_id</th>\n",
       "      <th>amount</th>\n",
       "      <th>item_price_usd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>92567513</td>\n",
       "      <td>JBL</td>\n",
       "      <td>Official Shop</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1657263</td>\n",
       "      <td>Sandisk</td>\n",
       "      <td>Official Shop</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>83401047</td>\n",
       "      <td>Revlon</td>\n",
       "      <td>Official Shop</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>4259661</td>\n",
       "      <td>Philips</td>\n",
       "      <td>Official Shop</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4350106</td>\n",
       "      <td>Kimberly Clark</td>\n",
       "      <td>Official Shop</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3304970</th>\n",
       "      <td>3304970</td>\n",
       "      <td>44671618</td>\n",
       "      <td>Nyx Professional</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.333046e+09</td>\n",
       "      <td>722996198.0</td>\n",
       "      <td>2019-05-19</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.977768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3304971</th>\n",
       "      <td>3304971</td>\n",
       "      <td>44671618</td>\n",
       "      <td>Nyx Professional</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.333054e+09</td>\n",
       "      <td>722996198.0</td>\n",
       "      <td>2019-05-19</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.977768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3304972</th>\n",
       "      <td>3304972</td>\n",
       "      <td>45237836</td>\n",
       "      <td>Colgate</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3304973</th>\n",
       "      <td>3304973</td>\n",
       "      <td>45330974</td>\n",
       "      <td>Bata</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3304974</th>\n",
       "      <td>3304974</td>\n",
       "      <td>45394315</td>\n",
       "      <td>Huawei</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3304975 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           index   shop_id             brand      shop_type       orderid  \\\n",
       "0              0  92567513               JBL  Official Shop           NaN   \n",
       "1              1   1657263           Sandisk  Official Shop           NaN   \n",
       "2              2  83401047            Revlon  Official Shop           NaN   \n",
       "3              3   4259661           Philips  Official Shop           NaN   \n",
       "4              4   4350106    Kimberly Clark  Official Shop           NaN   \n",
       "...          ...       ...               ...            ...           ...   \n",
       "3304970  3304970  44671618  Nyx Professional            NaN  1.333046e+09   \n",
       "3304971  3304971  44671618  Nyx Professional            NaN  1.333054e+09   \n",
       "3304972  3304972  45237836           Colgate            NaN           NaN   \n",
       "3304973  3304973  45330974              Bata            NaN           NaN   \n",
       "3304974  3304974  45394315            Huawei            NaN           NaN   \n",
       "\n",
       "              itemid    date_id  amount  item_price_usd  \n",
       "0                NaN        NaT     NaN             NaN  \n",
       "1                NaN        NaT     NaN             NaN  \n",
       "2                NaN        NaT     NaN             NaN  \n",
       "3                NaN        NaT     NaN             NaN  \n",
       "4                NaN        NaT     NaN             NaN  \n",
       "...              ...        ...     ...             ...  \n",
       "3304970  722996198.0 2019-05-19     1.0        5.977768  \n",
       "3304971  722996198.0 2019-05-19     1.0        5.977768  \n",
       "3304972          NaN        NaT     NaN             NaN  \n",
       "3304973          NaN        NaT     NaN             NaN  \n",
       "3304974          NaN        NaT     NaN             NaN  \n",
       "\n",
       "[3304975 rows x 9 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined = combined.reset_index()\n",
    "combined"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int32')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#combined[combined['itemid']=='-2115884395']\n",
    "combined['shop_id'].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Johnson & Johnson    454670\n",
       "SMart                391014\n",
       "P&G                  363113\n",
       "Loreal               332398\n",
       "Maybelline           241488\n",
       "                      ...  \n",
       "Sofina                   33\n",
       "Dugro                    33\n",
       "John Frieda              33\n",
       "Quaker                   33\n",
       "Lenovo / Mobile          13\n",
       "Name: brand, Length: 270, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#counting brand again \n",
    "combined.brand.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>shop_id</th>\n",
       "      <th>brand</th>\n",
       "      <th>shop_type</th>\n",
       "      <th>orderid</th>\n",
       "      <th>itemid</th>\n",
       "      <th>date_id</th>\n",
       "      <th>amount</th>\n",
       "      <th>item_price_usd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>92567513</td>\n",
       "      <td>JBL</td>\n",
       "      <td>Official Shop</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1657263</td>\n",
       "      <td>Sandisk</td>\n",
       "      <td>Official Shop</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>83401047</td>\n",
       "      <td>Revlon</td>\n",
       "      <td>Official Shop</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>4259661</td>\n",
       "      <td>Philips</td>\n",
       "      <td>Official Shop</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4350106</td>\n",
       "      <td>Kimberly Clark</td>\n",
       "      <td>Official Shop</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3304962</th>\n",
       "      <td>3304962</td>\n",
       "      <td>43719124</td>\n",
       "      <td>Nestle Food</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3304963</th>\n",
       "      <td>3304963</td>\n",
       "      <td>44437739</td>\n",
       "      <td>P&amp;G</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3304972</th>\n",
       "      <td>3304972</td>\n",
       "      <td>45237836</td>\n",
       "      <td>Colgate</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3304973</th>\n",
       "      <td>3304973</td>\n",
       "      <td>45330974</td>\n",
       "      <td>Bata</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3304974</th>\n",
       "      <td>3304974</td>\n",
       "      <td>45394315</td>\n",
       "      <td>Huawei</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>175392 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           index   shop_id           brand      shop_type  orderid  itemid  \\\n",
       "0              0  92567513             JBL  Official Shop      NaN     NaN   \n",
       "1              1   1657263         Sandisk  Official Shop      NaN     NaN   \n",
       "2              2  83401047          Revlon  Official Shop      NaN     NaN   \n",
       "3              3   4259661         Philips  Official Shop      NaN     NaN   \n",
       "4              4   4350106  Kimberly Clark  Official Shop      NaN     NaN   \n",
       "...          ...       ...             ...            ...      ...     ...   \n",
       "3304962  3304962  43719124     Nestle Food            NaN      NaN     NaN   \n",
       "3304963  3304963  44437739             P&G            NaN      NaN     NaN   \n",
       "3304972  3304972  45237836         Colgate            NaN      NaN     NaN   \n",
       "3304973  3304973  45330974            Bata            NaN      NaN     NaN   \n",
       "3304974  3304974  45394315          Huawei            NaN      NaN     NaN   \n",
       "\n",
       "        date_id  amount  item_price_usd  \n",
       "0           NaT     NaN             NaN  \n",
       "1           NaT     NaN             NaN  \n",
       "2           NaT     NaN             NaN  \n",
       "3           NaT     NaN             NaN  \n",
       "4           NaT     NaN             NaN  \n",
       "...         ...     ...             ...  \n",
       "3304962     NaT     NaN             NaN  \n",
       "3304963     NaT     NaN             NaN  \n",
       "3304972     NaT     NaN             NaN  \n",
       "3304973     NaT     NaN             NaN  \n",
       "3304974     NaT     NaN             NaN  \n",
       "\n",
       "[175392 rows x 9 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined[pd.isnull(combined['date_id'])]\n",
    "#kesimpulan = there are brand that is not selling items in this range of date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>shop_id</th>\n",
       "      <th>brand</th>\n",
       "      <th>shop_type</th>\n",
       "      <th>orderid</th>\n",
       "      <th>itemid</th>\n",
       "      <th>date_id</th>\n",
       "      <th>amount</th>\n",
       "      <th>item_price_usd</th>\n",
       "      <th>gross</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>92567513</td>\n",
       "      <td>JBL</td>\n",
       "      <td>Official Shop</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1657263</td>\n",
       "      <td>Sandisk</td>\n",
       "      <td>Official Shop</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>83401047</td>\n",
       "      <td>Revlon</td>\n",
       "      <td>Official Shop</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>4259661</td>\n",
       "      <td>Philips</td>\n",
       "      <td>Official Shop</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4350106</td>\n",
       "      <td>Kimberly Clark</td>\n",
       "      <td>Official Shop</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3304970</th>\n",
       "      <td>3304970</td>\n",
       "      <td>44671618</td>\n",
       "      <td>Nyx Professional</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.333046e+09</td>\n",
       "      <td>722996198.0</td>\n",
       "      <td>2019-05-19</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.977768</td>\n",
       "      <td>5.977768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3304971</th>\n",
       "      <td>3304971</td>\n",
       "      <td>44671618</td>\n",
       "      <td>Nyx Professional</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.333054e+09</td>\n",
       "      <td>722996198.0</td>\n",
       "      <td>2019-05-19</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.977768</td>\n",
       "      <td>5.977768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3304972</th>\n",
       "      <td>3304972</td>\n",
       "      <td>45237836</td>\n",
       "      <td>Colgate</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3304973</th>\n",
       "      <td>3304973</td>\n",
       "      <td>45330974</td>\n",
       "      <td>Bata</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3304974</th>\n",
       "      <td>3304974</td>\n",
       "      <td>45394315</td>\n",
       "      <td>Huawei</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3304975 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           index   shop_id             brand      shop_type       orderid  \\\n",
       "0              0  92567513               JBL  Official Shop           NaN   \n",
       "1              1   1657263           Sandisk  Official Shop           NaN   \n",
       "2              2  83401047            Revlon  Official Shop           NaN   \n",
       "3              3   4259661           Philips  Official Shop           NaN   \n",
       "4              4   4350106    Kimberly Clark  Official Shop           NaN   \n",
       "...          ...       ...               ...            ...           ...   \n",
       "3304970  3304970  44671618  Nyx Professional            NaN  1.333046e+09   \n",
       "3304971  3304971  44671618  Nyx Professional            NaN  1.333054e+09   \n",
       "3304972  3304972  45237836           Colgate            NaN           NaN   \n",
       "3304973  3304973  45330974              Bata            NaN           NaN   \n",
       "3304974  3304974  45394315            Huawei            NaN           NaN   \n",
       "\n",
       "              itemid    date_id  amount  item_price_usd     gross  \n",
       "0                NaN        NaT     NaN             NaN       NaN  \n",
       "1                NaN        NaT     NaN             NaN       NaN  \n",
       "2                NaN        NaT     NaN             NaN       NaN  \n",
       "3                NaN        NaT     NaN             NaN       NaN  \n",
       "4                NaN        NaT     NaN             NaN       NaN  \n",
       "...              ...        ...     ...             ...       ...  \n",
       "3304970  722996198.0 2019-05-19     1.0        5.977768  5.977768  \n",
       "3304971  722996198.0 2019-05-19     1.0        5.977768  5.977768  \n",
       "3304972          NaN        NaT     NaN             NaN       NaN  \n",
       "3304973          NaN        NaT     NaN             NaN       NaN  \n",
       "3304974          NaN        NaT     NaN             NaN       NaN  \n",
       "\n",
       "[3304975 rows x 10 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# bikin kolom baru mengenai gross value\n",
    "combined['gross'] = combined['amount'] *combined['item_price_usd']\n",
    "combined"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#total gross for every itemid grouped by brand\n",
    "new =combined.groupby(['brand','itemid']).gross.sum().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#sorted data from highest gross to lowest\n",
    "fixed_data = new.sort_values(by=['brand','gross'],ascending=False).groupby('brand').head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>brand</th>\n",
       "      <th>itemid</th>\n",
       "      <th>gross</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1877</th>\n",
       "      <td>eMart</td>\n",
       "      <td>2.000755e+09</td>\n",
       "      <td>247731.158603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1886</th>\n",
       "      <td>eMart</td>\n",
       "      <td>2.046259e+09</td>\n",
       "      <td>210490.526927</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1887</th>\n",
       "      <td>eMart</td>\n",
       "      <td>2.046281e+09</td>\n",
       "      <td>101251.340645</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1782</th>\n",
       "      <td>Za</td>\n",
       "      <td>3.659811e+08</td>\n",
       "      <td>22053.704693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1788</th>\n",
       "      <td>Za</td>\n",
       "      <td>1.074619e+09</td>\n",
       "      <td>10883.450433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>ASUS</td>\n",
       "      <td>2.046281e+09</td>\n",
       "      <td>11294.970271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>ASUS</td>\n",
       "      <td>1.738132e+09</td>\n",
       "      <td>5888.316059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AHC</td>\n",
       "      <td>1.617870e+09</td>\n",
       "      <td>8484.129360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AHC</td>\n",
       "      <td>1.617870e+09</td>\n",
       "      <td>3659.941936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AHC</td>\n",
       "      <td>1.617870e+09</td>\n",
       "      <td>2313.008989</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>162 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      brand        itemid          gross\n",
       "1877  eMart  2.000755e+09  247731.158603\n",
       "1886  eMart  2.046259e+09  210490.526927\n",
       "1887  eMart  2.046281e+09  101251.340645\n",
       "1782     Za  3.659811e+08   22053.704693\n",
       "1788     Za  1.074619e+09   10883.450433\n",
       "...     ...           ...            ...\n",
       "36     ASUS  2.046281e+09   11294.970271\n",
       "30     ASUS  1.738132e+09    5888.316059\n",
       "1       AHC  1.617870e+09    8484.129360\n",
       "2       AHC  1.617870e+09    3659.941936\n",
       "0       AHC  1.617870e+09    2313.008989\n",
       "\n",
       "[162 rows x 3 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fixed_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#include all brand in fixed data\n",
    "##create a series of brand\n",
    "brands = pd.Series(extra2['brand'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "##merging fixed data with brands\n",
    "fixed=pd.merge(left = fixed_data,right = brands,how='outer',left_on='brand',right_on='brand')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>brand</th>\n",
       "      <th>itemid</th>\n",
       "      <th>gross</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>eMart</td>\n",
       "      <td>2.000755e+09</td>\n",
       "      <td>247731.158603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>eMart</td>\n",
       "      <td>2.000755e+09</td>\n",
       "      <td>247731.158603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>eMart</td>\n",
       "      <td>2.000755e+09</td>\n",
       "      <td>247731.158603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>eMart</td>\n",
       "      <td>2.000755e+09</td>\n",
       "      <td>247731.158603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>eMart</td>\n",
       "      <td>2.000755e+09</td>\n",
       "      <td>247731.158603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>328167</th>\n",
       "      <td>Lenovo / Computers</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>328168</th>\n",
       "      <td>Lenovo / Computers</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>328169</th>\n",
       "      <td>Lenovo / Computers</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>328170</th>\n",
       "      <td>Lenovo / Computers</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>328171</th>\n",
       "      <td>Lenovo / Computers</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>328172 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     brand        itemid          gross\n",
       "0                    eMart  2.000755e+09  247731.158603\n",
       "1                    eMart  2.000755e+09  247731.158603\n",
       "2                    eMart  2.000755e+09  247731.158603\n",
       "3                    eMart  2.000755e+09  247731.158603\n",
       "4                    eMart  2.000755e+09  247731.158603\n",
       "...                    ...           ...            ...\n",
       "328167  Lenovo / Computers           NaN            NaN\n",
       "328168  Lenovo / Computers           NaN            NaN\n",
       "328169  Lenovo / Computers           NaN            NaN\n",
       "328170  Lenovo / Computers           NaN            NaN\n",
       "328171  Lenovo / Computers           NaN            NaN\n",
       "\n",
       "[328172 rows x 3 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fixed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#drop duplicates\n",
    "fixed_1 = fixed.drop_duplicates(subset=['brand','itemid', 'gross'], keep='first')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>brand</th>\n",
       "      <th>itemid</th>\n",
       "      <th>gross</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>eMart</td>\n",
       "      <td>2.000755e+09</td>\n",
       "      <td>247731.158603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>502</th>\n",
       "      <td>eMart</td>\n",
       "      <td>2.046259e+09</td>\n",
       "      <td>210490.526927</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004</th>\n",
       "      <td>eMart</td>\n",
       "      <td>2.046281e+09</td>\n",
       "      <td>101251.340645</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1506</th>\n",
       "      <td>Za</td>\n",
       "      <td>3.659811e+08</td>\n",
       "      <td>22053.704693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1893</th>\n",
       "      <td>Za</td>\n",
       "      <td>1.074619e+09</td>\n",
       "      <td>10883.450433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>327710</th>\n",
       "      <td>Aveeno</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>327824</th>\n",
       "      <td>Shiseido PC Brands</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>327967</th>\n",
       "      <td>Beiersdorf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>328094</th>\n",
       "      <td>Lenovo / Mobile</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>328107</th>\n",
       "      <td>Lenovo / Computers</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>373 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     brand        itemid          gross\n",
       "0                    eMart  2.000755e+09  247731.158603\n",
       "502                  eMart  2.046259e+09  210490.526927\n",
       "1004                 eMart  2.046281e+09  101251.340645\n",
       "1506                    Za  3.659811e+08   22053.704693\n",
       "1893                    Za  1.074619e+09   10883.450433\n",
       "...                    ...           ...            ...\n",
       "327710              Aveeno           NaN            NaN\n",
       "327824  Shiseido PC Brands           NaN            NaN\n",
       "327967          Beiersdorf           NaN            NaN\n",
       "328094     Lenovo / Mobile           NaN            NaN\n",
       "328107  Lenovo / Computers           NaN            NaN\n",
       "\n",
       "[373 rows x 3 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fixed_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Azra\\miniconda3\\envs\\tensorflow\\lib\\site-packages\\pandas\\core\\generic.py:5303: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self[name] = value\n"
     ]
    }
   ],
   "source": [
    "fixed_1.itemid=fixed_1.itemid.fillna(0)\n",
    "fixed_1.itemid=fixed_1.itemid.astype(int)\n",
    "fixed_1.itemid=fixed_1.itemid.astype(str)\n",
    "fixed_1.itemid=fixed_1.itemid.replace('0','N.A')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>brand</th>\n",
       "      <th>itemid</th>\n",
       "      <th>gross</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>eMart</td>\n",
       "      <td>2000755197</td>\n",
       "      <td>247731.158603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>502</th>\n",
       "      <td>eMart</td>\n",
       "      <td>2046258587</td>\n",
       "      <td>210490.526927</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004</th>\n",
       "      <td>eMart</td>\n",
       "      <td>2046281478</td>\n",
       "      <td>101251.340645</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1506</th>\n",
       "      <td>Za</td>\n",
       "      <td>365981058</td>\n",
       "      <td>22053.704693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1893</th>\n",
       "      <td>Za</td>\n",
       "      <td>1074619349</td>\n",
       "      <td>10883.450433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>327710</th>\n",
       "      <td>Aveeno</td>\n",
       "      <td>N.A</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>327824</th>\n",
       "      <td>Shiseido PC Brands</td>\n",
       "      <td>N.A</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>327967</th>\n",
       "      <td>Beiersdorf</td>\n",
       "      <td>N.A</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>328094</th>\n",
       "      <td>Lenovo / Mobile</td>\n",
       "      <td>N.A</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>328107</th>\n",
       "      <td>Lenovo / Computers</td>\n",
       "      <td>N.A</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>373 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     brand      itemid          gross\n",
       "0                    eMart  2000755197  247731.158603\n",
       "502                  eMart  2046258587  210490.526927\n",
       "1004                 eMart  2046281478  101251.340645\n",
       "1506                    Za   365981058   22053.704693\n",
       "1893                    Za  1074619349   10883.450433\n",
       "...                    ...         ...            ...\n",
       "327710              Aveeno         N.A            NaN\n",
       "327824  Shiseido PC Brands         N.A            NaN\n",
       "327967          Beiersdorf         N.A            NaN\n",
       "328094     Lenovo / Mobile         N.A            NaN\n",
       "328107  Lenovo / Computers         N.A            NaN\n",
       "\n",
       "[373 rows x 3 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fixed_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "fixed_2=fixed_1.groupby('brand')['itemid'].apply(', '.join).reset_index()\n",
    "fixed_2['Answers'] = fixed_2['brand'].str.cat(fixed_2['itemid'],sep=\", \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>brand</th>\n",
       "      <th>itemid</th>\n",
       "      <th>Answers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Anker</td>\n",
       "      <td>-2115884395, 214476390, 1985117325</td>\n",
       "      <td>Anker, -2115884395, 214476390, 1985117325</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    brand                              itemid  \\\n",
       "10  Anker  -2115884395, 214476390, 1985117325   \n",
       "\n",
       "                                      Answers  \n",
       "10  Anker, -2115884395, 214476390, 1985117325  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fixed_2[fixed_2['brand']=='Anker']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>orderid</th>\n",
       "      <th>itemid</th>\n",
       "      <th>date_id</th>\n",
       "      <th>amount</th>\n",
       "      <th>item_price_usd</th>\n",
       "      <th>shop_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>139082</th>\n",
       "      <td>1332946287</td>\n",
       "      <td>2179082901</td>\n",
       "      <td>19/5/2019</td>\n",
       "      <td>1</td>\n",
       "      <td>68.37878</td>\n",
       "      <td>16461019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           orderid      itemid    date_id  amount  item_price_usd   shop_id\n",
       "139082  1332946287  2179082901  19/5/2019       1        68.37878  16461019"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "extra3[extra3['orderid']==1332946287]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>brand</th>\n",
       "      <th>itemid</th>\n",
       "      <th>Answers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Colgate</td>\n",
       "      <td>-2016779889, -2016779887, -2016779862</td>\n",
       "      <td>Colgate, -2016779889, -2016779887, -2016779862</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      brand                                 itemid  \\\n",
       "43  Colgate  -2016779889, -2016779887, -2016779862   \n",
       "\n",
       "                                           Answers  \n",
       "43  Colgate, -2016779889, -2016779887, -2016779862  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fixed_2[fixed_2['brand']=='Colgate']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "jawaban = pd.Series(fixed_2['Answers']).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Answers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3M, N.A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>3M Littmann, N.A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>AHC, 1617870234, 1617870245, 1617870178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>ASUS, 2046258587, 2046281478, 1738131639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Abbott, 1437756029, 1414181351, 1414181383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>265</th>\n",
       "      <td>265</td>\n",
       "      <td>Wyeth Nutrition , N.A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>266</th>\n",
       "      <td>266</td>\n",
       "      <td>Xiaomi, 1373245117, 967538060, 1913571916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267</th>\n",
       "      <td>267</td>\n",
       "      <td>Yves Rocher, 1719453583, 1719453786, 2109554227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>268</th>\n",
       "      <td>268</td>\n",
       "      <td>Za, 365981058, 1074619349, 365980821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269</th>\n",
       "      <td>269</td>\n",
       "      <td>eMart, 2000755197, 2046258587, 2046281478</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>270 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     index                                          Answers\n",
       "0        0                                          3M, N.A\n",
       "1        1                                 3M Littmann, N.A\n",
       "2        2          AHC, 1617870234, 1617870245, 1617870178\n",
       "3        3         ASUS, 2046258587, 2046281478, 1738131639\n",
       "4        4       Abbott, 1437756029, 1414181351, 1414181383\n",
       "..     ...                                              ...\n",
       "265    265                            Wyeth Nutrition , N.A\n",
       "266    266        Xiaomi, 1373245117, 967538060, 1913571916\n",
       "267    267  Yves Rocher, 1719453583, 1719453786, 2109554227\n",
       "268    268             Za, 365981058, 1074619349, 365980821\n",
       "269    269        eMart, 2000755197, 2046258587, 2046281478\n",
       "\n",
       "[270 rows x 2 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "jawaban"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "ename": "PermissionError",
     "evalue": "[Errno 13] Permission denied: 'C:\\\\Users\\\\Azra\\\\Documents\\\\Shopee Project\\\\20200530 BestCoder Project\\\\3. Uploaded Data\\\\jawaban.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mPermissionError\u001b[0m                           Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-30-6a1930e87dd6>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mjawaban\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34mr'C:\\Users\\Azra\\Documents\\Shopee Project\\20200530 BestCoder Project\\3. Uploaded Data\\jawaban.csv'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\miniconda3\\envs\\tensorflow\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36mto_csv\u001b[1;34m(self, path_or_buf, sep, na_rep, float_format, columns, header, index, index_label, mode, encoding, compression, quoting, quotechar, line_terminator, chunksize, date_format, doublequote, escapechar, decimal)\u001b[0m\n\u001b[0;32m   3202\u001b[0m             \u001b[0mdecimal\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdecimal\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3203\u001b[0m         )\n\u001b[1;32m-> 3204\u001b[1;33m         \u001b[0mformatter\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msave\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3205\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3206\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mpath_or_buf\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\miniconda3\\envs\\tensorflow\\lib\\site-packages\\pandas\\io\\formats\\csvs.py\u001b[0m in \u001b[0;36msave\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    186\u001b[0m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    187\u001b[0m                 \u001b[0mencoding\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mencoding\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 188\u001b[1;33m                 \u001b[0mcompression\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcompression_args\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcompression\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    189\u001b[0m             )\n\u001b[0;32m    190\u001b[0m             \u001b[0mclose\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\miniconda3\\envs\\tensorflow\\lib\\site-packages\\pandas\\io\\common.py\u001b[0m in \u001b[0;36mget_handle\u001b[1;34m(path_or_buf, mode, encoding, compression, memory_map, is_text)\u001b[0m\n\u001b[0;32m    426\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mencoding\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    427\u001b[0m             \u001b[1;31m# Encoding\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 428\u001b[1;33m             \u001b[0mf\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpath_or_buf\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mencoding\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnewline\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    429\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0mis_text\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    430\u001b[0m             \u001b[1;31m# No explicit encoding\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mPermissionError\u001b[0m: [Errno 13] Permission denied: 'C:\\\\Users\\\\Azra\\\\Documents\\\\Shopee Project\\\\20200530 BestCoder Project\\\\3. Uploaded Data\\\\jawaban.csv'"
     ]
    }
   ],
   "source": [
    "jawaban.to_csv(r'C:\\Users\\Azra\\Documents\\Shopee Project\\20200530 BestCoder Project\\3. Uploaded Data\\jawaban.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.7 (tensorflow)",
   "language": "python",
   "name": "tensorflow"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
